Boas práticas
As boas práticas são fundamentais para manter a saúde do seu código, tornando sua manutenção simples e seu perfil de programador elevado.

• Elaborar códigos usando fluxogramas
• Sempre que possível desenvolva códigos usando Classes para garantir o padrão OOP.
• Aplicações devem ser Rest/Restful compartimentalizadas seguindo padrão MVC e OOP [Classes] e consumidas com React
• Sempre que precisar criar chaves privadas use o Symbol.
• Sempre programe em inglês utilizando camelCase.
• Sempre que possível declare utilizando const, e se fizer use maiúsculas.
• Sempre que possível utilize arrow function simplificada ou o mais próximo disso. 
• Se possível cada função deve executar apenas um código por vez. 
• Operador Ternário ou Short-Circuit pode otimizar a performance do seu código.
• Se a função tiver sinal de atribuição, é obrigatório o uso de ponto e vírgula.
• Toda vez que for usar estrutura de repetição reflita qual estrutura é a melhor escolha.
• Nunca esqueça de tratar os erros com Try, Catch( .. ) e Finally
• O throw new Error('..') irá lançar o erro diretamente para o catch(..).
• Não use multiplos escutadores, re-use o mesmo, isso tornará seu código mais performático (Exemplo cronômetro).

Dicas
Informações que poderão ser úteis. 

• Sempre que precisar compartilhar estados ou dados globalmente use Redux.
• Formate textos com Slice( )!
• Lembre-se do Curto-Circuíto: Se ABC for true && faça isso!
• Quando trabalhar com AJAX ou Requisições (XML), considere o uso de Fetch(), ou AXIOS o que torna o trabalho ainda mais simples.
• Para gerar letras use: String.fromCharCode( .. )
• Quando trabalhar com objetos ou arrays considerar o uso de atrib. por desestruturação e estruturação de dados com o uso de new Map( ).
• Só use o innerHTML se seu código contiver tags html se não, use o innerText.
• Para iterar objetos use for in para iterar arrays de modo semântico e simples for of para aplicar funções em elementos de um array forEach.
• Ao criar uma função ofereça um retorno padrão utilizando (!argumento).
• É possível criar atributos váriados como classes ou identificadores, usando apenas o setAttribute.
• Quando precisar encontrar um elemento na página, use e.target.
• Para eliminar um objeto, basta remover o elemento pai. 
• Para salvar elementos no navegador, use LocalStorage.
• Sabendo que toda função é um objeto de primeira-classe, busque usar dos seus recursos.
• Ficar atento aos métodos eles são extremamente úteis como: "eval( .. ), slice( 0, -1 )..."
• Se você precisa organizar o seu programa em etapas ou criar uma sequência de execução, considere o uso de Funções Geradoras. [yields]
• Cuidado ao "guardar" arrays ou objetos, pois valores por referência são apenas indicadores de endereço na memória, portanto se houver alteração tanto na variável quanto na array, ambos modificarão o estado da memória referenciada. A única forma de duplicar uma array é criando outra igual.
• Acessar o maior número possível Number.MAX_VALUE
• O método splice( .. ) fornece muito mais autonômia na manipulação de arrays.
• Ao trabalhar com Arrays considere o uso de Filter, Map ou Reduce
• Para congelar qualquer elemento/objeto e não permitir alterações é possível utilizar o Object.freeze(..)
• Object.defineProperty para modificar as propriedades de qualquer objeto, para não criar loops trabalhe com let no this.

React
• Não podemos editar o estado diretamente.

This
A palavra this, sempre estará se referindo a instância da classe construtora ao qual ela pertence no momento.

Variáveis
A variável aponta para o endereço na memória e o endereço da memória aponta para o valor.

Objetos
• Funções dentro de objetos são métodos, e métodos não precisam do "function .."
• Para configurar a entrada e saída de um método use: getters e setters
• Para modificar as suas propriedades use Object.defineProperty( .. )
• Um objeto dentro de uma variável é apenas um link para um endereço de memória.
• Para de fato copiar objetos use: let abc =  {...objeto}.
• (forEach ou for of) para manipular ou iterar objetos:   objeto.forEach(obj => obj.chave)   !Para cada laço do objeto, retorne a chave x.
• Sempre que possível use notação dinâmica para atribuir e selecionar propriedades: objeto[propriedade]

Funções em Ordem Específica
• Async e Await: Sempre que seu código se relacionar com a internet ou qualquer recurso remoto é obrigatório o seu uso.
! Eles servem para tornar possível a comunicação com a internet que é instável através da otimização assíncrona.
• Sempre que precisar executar múltiplas funções de modo ordenado, considere Promises( .. ) com Async e Await envoltos em um Try Catch.
• Lembre-se que os parâmetros das funções também podem ser usados de modo Booleano, em conjunto do Short-Circuit -> função(true?, true?, true?){...}


Array
• É possível transformar Strings em Arrays  e aplicar funções facilmente com Array.from.

Expressões Regulares
As expressões regulares, podem facilitar muito a manipulação de Strings.

Prototypes
Sempre que estiver trabalhando com funções construtoras, faça uso de prototypes, e heranças.
!Prototype é o "local" de armazenamento de métodos, cujo acesso é restrito as instâncias da classe Mãe, a vantagem é performance, métodos são carregados a cada instância.

Validações
Busque criar as validações sempre antes do código, pois aumenta a performance.

Formulários
Sempre que for criar um formulário lembre-se da aula do professor, lá tem muitas dicas.

Erros
• Sempre que capturar um erro use new Error( .. ) para mostrá-lo.
• Para mostrar erros corretamente, use console.warn('..') ou console.error('..');

JSON e Requisições
• Quando trabalhar com AJAX ou Requisições (XML), considere o uso de Fetch() ou Axios, pois torna o trabalho ainda mais simples.
• Este é um processo client-side portanto trabalhar via navegador.
• Para ver e manipular adequadamento, o array extraído de um JSON precisa ser iterado via for of.
• Converter objetos em JSON:    JSON.stringify(objeto,'', 2);
• Converter JSON em objetos:    JSON.parse(json)

Módulos Importação | Exportação
• Considere seu uso frequente.
• Sempre apelide os nomes durante a importação | exportação.

Transpiladores
Sempre que possível transpile seu código para aumentar a compatibilidade.
• Para isso, use Webpack ou Babel (site).








NodeJS
Dicas e boas práticas.

 Importação | Exportação (Módulos)
• Para exportar ou importar use o objeto modules. 
• Para importar pacotes do NPM usamos apenas o nome: const nome = require('pacote');

NPM (Node Package Manager)
• Para instalar pacotes primeiro inicie-o: npm init -y;
• Depois, npm i pacote.
• Dev Dependecies é uma Flag que impede que packages de desenvolvedor como "Webpack" sejam enviados juntos no deploy.
• Toda versão que tiver o símbolo "^" significa que o Minor e o Patch poderão ser atualizados.
• Nomenclatura das versões: "@1.5.4"
- @         1         5         4
- Versão    Major     Minor     Patch

- Major > Uma versão completamente nova que pode afetar a compatibilidade.
- Minor > Novos recursos que não afetam a compatibilidade.
- Patch > Correção de bugs.

Manipulando o package.json:
1.  Instalar pacotes:                               npm i pacote
2.  Congela Atualização Minor e Patch:              npm i pacote -E                !remove ^
3.  Atualizar pacotes:                              npm update                     !apenas pacotes com ^
4.  Mover para devdep:                              npm i pacote --save-dev
5.  Mover para dependecies:                         npm i pacote --save-prod
6.  Instalar versão específica:                     npm i pacote@1.5.4 -E
7.  Instalar a última versão da Major específica:   npm i pacote@1.x
8.  Desinstalar um pacote:                          npm uninstal pacote
9.  Listar os pacotes instalados                    npm ls
10. Listar apenas os pacotes que você instalou:     npm ls --depth=0
11. Pacotes Desatualizados:                         npm outdated


Navegando entre Pastas
• Pasta atual a diante: ./
• Voltar uma pasta: ../
• Retorna o caminho absoluto até o arquivo atual: console.log(__filename);
• Retorna o caminho absoluto até a pasta   atual: console.log(__dirname);
• Para criar caminhos universais independente do SO: let path = require('path') | path.resolve(__dirname);


FileSystem e Path - API Node (Nativa)
Criando, analisando e manipulando arquivos do sistema.

• Para analisar arquivos do sistema, ou manipulá-los use:         require('fs').promises;                     !Promises permite manipular o retorno dos métodos(..).
• Para trabalhar com caminhos de modo mais inteligente use:       require('path');
• Para escrever dados em um arquivo:                              filesystem.writefiles(caminho,dados,opções);
• Para ler os dados de um arquivo:                                filesystem.readfiles(caminho, 'UTF8');

! Importante, sempre que importar filesystem com promises, tratá-los com then(..) ou async.
! Estude os métodos do filesystem, existem vários.



Ferramentas essênciais
Lista das principais ferramentas usadas até então, e uma breve descrição.

• Node.js      | Ambiente de criação remota ao browser.
• NPM          | Gerenciador de Pacotes do Node.js
• Webpack      | Transpilador de código, gera o bundle.js arquivo com retro-compatibilidade.                 !Para ser acionado: npm run wp
• Path         | Gerenciador de caminhos.
• FileSystem   | Pacote que permite o acesso a pastas do sistema via node.
• Express      | Microframework que permite a criação de aplicações web.
• Nodemon      | Essa ferramenta recarrega o servidor toda vez que for salvo, semelhante ao live-server.     !Para ser acionado: npm start
• MongoDB      | Banco de dados NoSQL (Not Only SQL) conexão com Express via Mongoose.
• MariaDB      | Diferente do MongoDB este banco de dados trabalha com SQL.
• EJS          | O EJS é uma engine utilizada pelo view que renderiza HTML com JS.
• .ENV         | Ocultador de dados sigilosos.
• Google Cloud | Trata-se de um servidor remoto, que fornece o cloud computing e de lá nossa aplicação deve se conectar com todos os side-components.
• Nginx        | O famoso "proxy-reverso" é a conexão do cliente com a aplicação, de lá a requisição é redirecionada ao servidor adequado. (GCP)
• Docker       | Com ele podemos ter acesso a aplicações de modo "portátil".
• Sucrase      | Faz os módulos de importação e exportação do node, funcionarem como no ES6, é uma espécie de transpilador. [Tipo babel]
• Eslint       | Força a escrita correta do código, padrão Airbnb.




Importante:
Toda vez que for desenvolver uma aplicação ou código, procure projetar as etapas do processo antes de iniciar, são 30 minutos que tornaram o desenvolvimento do processo muito mais eficiênte e claro, levando ai as vezes metade do tempo para ser feito.


TypeScript

• Public    → atributo acessível de qualquer ponto.
• Protected → atributo acessível até as classes filhas.
• Private   → atributo acessível somente dentro da própria classe.





















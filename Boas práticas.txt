Boas práticas
As boas práticas são fundamentais para manter a saúde do seu código, tornando sua manutenção simples e seu perfil de programador elevado.

• Nunca deixe seu código em escopo global, crie funções.
• Sempre que precisar criar chaves privadas use o Symbol.
• Sempre desenvolva o seu código de modo particionado.
• Programar em inglês
• Recomendado utilizar camelCase.
• Sempre que possível declare utilizando const.
• Os arquivos em JavaScript devem estar dentro da pasta js.
• Sempre selecione elementos utilizando QuerySelector.
• Sempre que possível utilize arrow function simplificada ou o mais próximo disso. 
• Se possível cada função deve executar apenas um código por vez. 
• Sempre utilizar operador de comparação estrito " === " ou " !== ".
• Sempre utilize parâmetros e argumentos em sua funções.
• Operador Ternário ou Short-Circuit pode otimizar a performance do seu código.
• Se a função tiver sinal de atribuição, é obrigatório o uso de ponto e vírgula.
• Toda vez que for usar estrutura de repetição reflita qual estrutura é a melhor escolha.
• Nunca esqueça de tratar os erros com Try, Catch( .. ) e Finally
• Não use multiplos escutadores, re-use o mesmo, isso tornará seu código mais performático (Exemplo cronômetro).
• Quando a condição tem retorno booleano, não precisa de true | false apenas retorne a condição exemplo:  return valor > 10 ao invés de um ternário.

Dicas
Informações que poderão ser úteis. 

• Quando trabalhar com objetos ou arrays considerar o uso de atrib. por desestruturação e estruturação de dados com o uso de new Map( ).
• Só use o innerHTML se seu código contiver tags html se não, use o innerText.
• Para iterar objetos use for in para iterar arrays de modo semântico e simples for of para aplicar funções em elementos de um array forEach.
• Ao criar uma função ofereça um retorno padrão utilizando (!argumento).
• É possível criar atributos váriados como classes ou identificadores, usando apenas o setAttribute.
• Quando precisar encontrar um elemento na página, use e.target.
• Para eliminar um objeto, basta remover o elemento pai. 
• Para salvar elementos no navegador, use LocalStorage.
• Sabendo que toda função é um objeto de primeira-classe, busque usar dos seus recursos.
• Ficar atento aos métodos eles são extremamente úteis como: "eval( .. ), slice( 0, -1 )..."
• A função-construtora foi desenvolvida para criar objetos.
• Se você precisa organizar o seu programa em etapas ou criar uma sequência de execução, considere o uso de Funções Geradoras.
• Cuidado ao "guardar" arrays ou objetos, pois valores por referência são apenas indicadores de endereço na memória, portanto se houver alteração tanto na variável quanto na array, ambos modificarão o estado da memória referenciada. A única forma de duplicar uma array é criando outra igual.
• Acessar o maior número possível Number.MAX_VALUE
• O método splice( .. ) fornece muito mais autonômia na manipulação de arrays.
• Ao trabalhar com Arrays considere o uso de Filter, Map ou Reduce
• Para congelar qualquer elemento/objeto e não permitir alterações é possível utilizar o Object.freeze(..)
• Object.defineProperty para modificar as propriedades de qualquer objeto, para não criar loops trabalhe com let no this.

This
A palavra this, respeita o produto da função construtora, e não  a própria função construtora. Portanto, todo produto desta função terá o respeito da palavra this ou seja todo  objeto criado pela função construtora.

Variáveis
A variável aponta para o endereço na memória e o endereço da memória aponta para o valor.

Objetos
• Para configurar a entrada e saída de um método use: getters e setters
• Para modificar as suas propriedades use Object.defineProperty( .. )
• Quando simplesmente coloca um objeto em outra variável você está apenas criando um novo link para o mesmo endereço de memória Existem formas corretas de copiar objetos {...objeto}.

Array
• É possível transformar Strings em Arrays  e aplicar funções facilmente com Array.from.

Expressões Regulares
As expressões regulares, podem facilitar muito a manipulação de Strings.

Prototypes
Sempre que estiver trabalhando com funções construtoras, faça uso de prototypes, e heranças.

Validações
Busque criar as validações sempre antes do código, pois aumenta a performance.

Formulários
Sempre que for criar um formulário lembre-se da aula do professor, lá tem muitas dicas.

Projeto Agenda - How to:


Criação do template
1.  Vamos copiar o Starter Template do site do Bootstrap e colar no Index.ejs                                     !Importar includes.
2.  Enviaremos o 'head' e o 'footer' para o includes, deixando apenas o h1.                                       !Colocar o nosso script no footer
3.  Para evitar conflitos com o Bootstrap apagaremos todos os dados do CSS.
4.  No site do BS iremos copiar a primeira Navbar que encontrarmos.
5.  Em includes crie um arquivo chamado navbar e a coloque, para então a limparmos.
6.  Com o bootstrap configuramos as aparências.


Criando página de login e criar conta
1.  Criamos a rota de login.                                                                                       !Paginas iniciais (index) podem ser omitidas.
2.  Criamos o Controller de login.
3.  Criamos o html de login, utilizando formulários do bootstrap.
!.  Para recebermos os dados do formulários, precisamos definir uma rota e um metódo de requisição(POST)           !Por padrão vem como GET
4.  Configuramos o middleware que renderiza a pagina 404 para qualquer erro.
!.  Injetar o input oculto que executa o sistema de segurança CSRF no Formulário.                                  !<input type="hidden" name="_csrf" value=<%= csrfToken %>>



Criando usuários

    Model
    1. Crie o template (Schema) de armazenamento de dados cadastrais do BD. 

    Criação e Conexão das Rotas
    1. Criamos a rota de registro do tipo POST e a conectamos em Controller.
    2. Importe o arquivo Model de Login, e conecte a função construtora no Controller do Login.
    !. Todas as configurações e validações são feitas no arquivo Model de cada Controller.
  
    Validação
    !. Nunca confie nos dados do usuário, sempre gere validações para todas as possibilidades.
    !. Toda função relacionada ao Mongoose e BD retorna Promises, logo devemos usar async e await.
    1. Crie o objeto que receberá o corpo da requisição, e os métodos de validação.
    2. Configure o controller para salvar a sessão e redirecionar a página de volta, em caso de erro.
    3. Crie um arquivo de messages em includes, onde executaremos um forEach que importará os erros via locals.
    !. Locals é o objeto onde colocamos dados via mw, para serem acessados em todo servidor.
    4. Em middlewares, acessaremos o locals, e caso existam pegaremos os errors enviados flash('errors', dados) no controller.
    5. Após criar toda teia de conexão de erros, os envie via "includes" para o local no html desejado.
    !. Checagem se o e-mail do usuário já existe.

    Registro
    1. Instalação do bcryptjs (encriptador de password)
    2. Após a validação, antes de registrar o usuário, executaremos o bcrypt.
    3. Com todos os dados validados, a propriedade usuário, recebe a criação do mesmo.
    !. Não esquecer de criar um hash para o password. hash != criptografar.


Logando usuários
    
    Criação do sistema de login.
    1. Crie a rota e o controller de login (Register adaptado)
    2. Em models, crie um método em Login chamado (login).
    3. Primeiro, novamente realize a validação pura.
    4. Usuário não existe? Push Erro.
    5. Uusário Existe Senha errada? Push Erro.
    6. Usuário Existe, Senha Correta? Cria uma sessão.

    
    Criando Sessão
    1. Em controller após as validações de login e abaixo da mensagem de "sucesso", digite: req.session.user = login.user;
    !. Estamos criando uma propriedade em session que vai receber o usuário.
    2. Em mw.global (crie em locals) a propriedade user, que receberá req.session.user
    3. Em nav.ejs usando locals, faremos uma checagem. Se user não existir: mostre -> Entrar

    Logout
    1. Criamos uma rota /login/logout que da acesso a requisição do tipo get cujo resposta no controller será um req.session.destroy();
    2. Depois em navbar configuramos os links para que apareçam corretamente quanto o "user" em locals existir ou não.


    
Cadastrando Contatos
    1. Crie a rota, o controller e o index.
    
    Validações
    1. Com middlewares verificaremos se o usuário solicitando a rota, já possui sessão ativa.
    2. Se o usuário não estiver logado, digitaremos: req.flash('errors', 'Efetue o login') que fará o push deste erro em errors e salve a sessão.
    !. Salvar a sessão é muito importante para garantir a atualização de estado do usuário.
    3. Middleware criado, vamos inserí-lo e executa-lo em rotas. (Importando-o).







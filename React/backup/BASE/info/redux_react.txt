O redux servirá para configurar/gerar um estado global em nossa aplicação, ou seja um local cujo acesso aos dados armazenados poderão ser feitos de qualquer parte da aplicação front-end.

Usaremos o redux para saber se o nosso usuário está logado a partir de qualquer componente da aplicação front-end.

Conseguiremos saber essas informações utilizando o axios.


!Nem toda aplicação necessariamente precisa de redux, usamos apenas quando precisamos saber de qualquer componente o estado de algum dado.

!O redux ele facilita o processo, pois o mesmo processo poderia ser feito por exemplo, importando e exportando um dado até o componente desejado, ou seja diversas "redes" de comunicação um grande linha. Enquanto o redux, faz isso automaticamente, tornando os dados que você quiser acessíveis de qualquer componente da aplicação.




Configurações:

-> instale: npm i redux react-redux.
-> Cria a pasta (store) tudo do redux ficará nela.
-> Crie o arquivo index.js
-> Carregue o createStore do redux.
-> Crie o reducer [state, action].


! Para testar, carregue o redux no app.js.
-> Import do provider + store: O provider irá envolver o store e "prover" a todos os componentes que estão dentro dele o estado global.
-> Aplique o no JSX: <Provider store={store}> ... todos componentes ... </ Provider>

Exemplo de uso: Quando 'x' botão for disparado queremos que 'x' ação seja feita.
-> No elemento adicione o listener 'onclick' e adicione uma função: ex[handleClick]
-> Em seguida usaremos o dispatch [disparador] que será a ação que irá "atualizar" o nosso estado global.
!  É possível disparar quantas ações quiser, como veremos no exemplo a seguir:


// Login/index.js

import React from 'react';
import { useDispatch } from 'react-redux'; // Disparador!

export default function Login() {
  const dispatch = useDispatch();

  function handleClick(e) {
    e.preventDefault();

    dispatch({
      type: 'BOTAO_CLICADO',
    });

    dispatch({
      type: 'BOTAO_CLICADO_2',
    });
  }


Store/Index.js

! Geralmente, por conta do volume de disparos nós buscamos separar os reducers em componentes.
! A grande ferramenta do arquivo de configuração do redux é o switch, pois é ele quem vai capturar os eventos de acordo com o "type" e em cada caso, atualizar o estado de acordo com a nossa vontade.


import { createStore } from 'redux';

const initialState = {
  botaoClicado: false,
};

const reducer = (state = initialState, action) => {

  switch (action.type) {

    case 'BOTAO_CLICADO': {

      const newState = { ...state };

      newState.botaoClicado = !newState.botaoClicado;

      return newState;

    }


    default: {
      return state;
    }
  }
};

const store = createStore(reducer);

export default store;



Agora queremos capturar esse estado, para isso basta importar a função do redux chamada: useSelector((state) => state);

import { useSelector } from 'react-redux';

export default function Header() { ...

  console.log(useSelector((state) => state));    -> Simples assim, estamos capturando o estado do objeto no header.

  ...
};





Funcionamento:

-> Faça as configurações [relativamente complexa]

Criaremos o estado inicial que será um objeto global:
-> Estado inicial = { usuario_logado: false, ... };

Para modificar:
-> criaremos uma ação > ação será ouvida pelo reducer > reducer com base no estado anterior, cria um novo estado > reducer retorna o novo estado que passa a ser o novo estado global.
! Resumindo, o redux nunca altera um estado, ele apenas substitui por novos estados.



